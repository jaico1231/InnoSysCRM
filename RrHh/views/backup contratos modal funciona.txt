# from io import BytesIO
import os
from django.http import FileResponse, HttpRequest, HttpResponse, HttpResponseBadRequest, HttpResponseRedirect
from django.contrib.auth.mixins import LoginRequiredMixin
from weasyprint import HTML
from django.template.loader import render_to_string
from django import template
from django.shortcuts import redirect, render
from django.views.generic import ListView, CreateView, UpdateView, DeleteView, DetailView, View, TemplateView
from django.urls import reverse_lazy
from RrHh.forms import Contrato_LaboralForm
from RrHh.forms.contrato_laboral_form import  DespidoForm, RenunciaForm, number_to_words
from RrHh.models.contrato_laboral import Contrato_Laboral
from shared.models.datos_empresa import Empresa
from num2words import num2words
from xhtml2pdf import pisa
from django.template.loader import get_template
from RrHh.utils import render_to_pdf
from django.shortcuts import get_object_or_404

class PDFTemplateMixin:
    template_name = None

    def render_to_pdf(self, context):
        template = get_template(self.template_name)
        html = template.render(context)
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = 'attachment; filename="contrato.pdf"'
        pisa_status = pisa.CreatePDF(html, dest=response)
        if pisa_status.err:
            return HttpResponse(f'We had some errors <pre>{html}</pre>')
        return response

class Listar_Contratos(LoginRequiredMixin, ListView):
    model = Contrato_Laboral
    template_name = 'Contratos/Listar_Contratos.html'
    form_class = Contrato_LaboralForm
   
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Listar Contratos'
        context['entity'] = 'Contratos'
        # context['renuncia_form'] = RenunciaForm()
        # context['despido_form'] = DespidoForm()
        context['list_url'] = reverse_lazy('RrHh:Listar_Contratos')
        return context
class Crear_Contratos(LoginRequiredMixin, CreateView):
    form_class = Contrato_LaboralForm
    template_name = 'Contratos/Crear_contrato.html'
    success_url = reverse_lazy('RrHh:Listar_Contratos')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Crear Contratos'
        context['entity'] = 'Contratos'
        context['list_url'] = reverse_lazy('RrHh:Listar_Contratos')
        return context
  
class Editar_Contratos(LoginRequiredMixin, UpdateView):
    model = Contrato_Laboral
    form_class = Contrato_LaboralForm
    template_name = 'Contratos/Crear_contrato.html'
    success_url = reverse_lazy('RrHh:Listar_Contratos')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Editar Contratos'
        context['entity'] = 'Contratos'
        context['list_url'] = reverse_lazy('RrHh:Listar_Contratos')
        return context
    
class Borrar_Contratos(LoginRequiredMixin, DeleteView):
    model = Contrato_Laboral
    template_name = 'Contratos/Borrar_Contratos.html'
    success_url = reverse_lazy('RrHh:Listar_Contratos')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Borrar Contratos'
        context['entity'] = 'Contratos'
        context['list_url'] = reverse_lazy('RrHh:Listar_Contratos')
        return context

class Detalle_Contratos(LoginRequiredMixin, PDFTemplateMixin, DetailView):
    model = Contrato_Laboral
    template_name = 'cartas/Contrato_Laboral.html'
    
    def get_object(self, pk):
        return get_object_or_404(Contrato_Laboral, pk=pk)

    def get(self, request, *args, **kwargs):
        self.object = self.get_object(kwargs['pk'])
        numero_identificacion = self.object.hoja_vida_FK.numero_identificacion
        doc = f'Contrato_Laboral_{self.object.id}.pdf'
        ruta = f'DOCUMENTOS/{numero_identificacion}/CONTRATO/{doc}'
        ruta_completa = f"/ROMIL_BETA1/ROMIL_BETA1/static/assets/{ruta}"
        os.makedirs(os.path.dirname(ruta_completa), exist_ok=True)
        context = self.get_context_data()
        template = get_template('cartas/Contrato_Laboral copy.html')
        html_template = template.render(context)
        HTML(string=html_template).write_pdf(ruta_completa)
        return FileResponse(open(ruta_completa, 'rb'), as_attachment=True, filename=doc)

        
        # Para la demostración, estamos imprimiendo la información en consola
        # Puedes descomentar la siguiente línea para generar el PDF
        # self.generate_pdf(ruta)
        
        context = self.get_context_data()
        return render(request, self.template_name, context)
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        contrato = self.object
        iniciales = Empresa.objects.get(id=1)
        try:
            salario_numerico = float(contrato.salario)
        except ValueError:
            salario_numerico = 0.0
        salario_formateado = "${:,.2f}".format(salario_numerico).replace(',', ' ').replace('.', ',').replace(' ','.')
        salario_texto = num2words(salario_numerico, lang='es').upper()
        dia_en_letras = num2words(contrato.fecha_inicio.day, lang='es').capitalize()
        mes_en_letras = contrato.fecha_inicio.strftime('%B')
        mes_en_letras = {
            'January': 'Enero',
            'February': 'Febrero',
            'March': 'Marzo',
            'April': 'Abril',
            'May': 'Mayo',
            'June': 'Junio',
            'July': 'Julio',
            'August': 'Agosto',
            'September': 'Septiembre',
            'October': 'Octubre',
            'November': 'Noviembre',
            'December': 'Diciembre'
        }.get(mes_en_letras, mes_en_letras)
        anio_en_letras = num2words(contrato.fecha_inicio.year, lang='es').capitalize()
        context['iniciales'] = iniciales
        context['salario_texto'] = salario_texto
        context['salario_formateado'] = salario_formateado
        context['id_contrato'] = contrato.id
        context['dia_en_letras'] = dia_en_letras
        context['mes_en_letras'] = mes_en_letras
        context['anio_en_letras'] = anio_en_letras
        context['title'] = 'Contratos'
        context['entity'] = 'Contratos'
        context['list_url'] = reverse_lazy('RrHh:Listar_Contratos')
        return context
    
    def PDF(self, request, *args, **kwargs):
        self.object = self.get_object()
        identificacion = self.object.hoja_vida.numero_identificacion
        print(identificacion)

class Contrato_pdf(LoginRequiredMixin, View):
    def get(self, request, *args, **kwargs):
        detalle_contratos_view = Detalle_Contratos()  # Assuming DetalleContratos is a valid view
        context = {}
        pdf_content = detalle_contratos_view.render_to_pdf(context=context).content  # Assuming render_to_pdf() returns the PDF content
        pdf_file = HTML(string=pdf_content).write_pdf()  # Generate the PDF file
        response = HttpResponse(pdf_file, content_type='application/pdf')
        response['Content-Disposition'] = 'attachment; filename="contrato.pdf"'
        return response


class NovedadContratoView(LoginRequiredMixin, TemplateView):
    template_name = 'Contratos/novedad_contrato.html'
    model = Contrato_Laboral

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Novedad Contrato'
        context['entity'] = 'Novedad'
        context['list_url'] = reverse_lazy('RrHh:Listar_Contratos')
        context['renuncia_form'] = RenunciaForm()
        context['despido_form'] = DespidoForm()
        return context

    def post(self, request, *args, **kwargs):
        renuncia_form = RenunciaForm(request.POST, request.FILES)
        despido_form = DespidoForm(request.POST)
        if renuncia_form.is_valid():
            renuncia_form.save()
        elif despido_form.is_valid():
            despido_form.save()
        return render(request, self.template_name, self.get_context_data())
    
    
# class Detalle_Contratos(LoginRequiredMixin, PDFTemplateMixin, View):
#     template_name = 'cartas/Contrato_Laboral.html'
#     model = Contrato_Laboral

#     def get_object(self, pk):
#         return get_object_or_404(Contrato_Laboral, pk=pk)

#     def get(self, request, *args, **kwargs):
#         self.object = self.get_object(kwargs['pk'])
#         numero_identificacion = self.object.hoja_vida_FK.numero_identificacion
#         print(numero_identificacion)
#         doc = f'Contrato_Laboral_{self.object.id}.pdf'
#         ruta = f'DOCUMENTOS/{numero_identificacion}/CONTRATO/{doc}'
        
#         # Para la demostración, estamos imprimiendo la información en consola
#         # Puedes descomentar la siguiente línea para generar el PDF
#         # self.generate_pdf(ruta)
        
#         context = self.get_context_data()
#         return render(request, self.template_name, context)

#     def post(self, request, *args, **kwargs):
#         self.object = self.get_object(kwargs['pk'])
#         numero_identificacion = self.object.hoja_vida_FK.numero_identificacion
#         print(numero_identificacion)
#         doc = f'Contrato_Laboral_{self.object.id}.pdf'
#         ruta = f'DOCUMENTOS/{numero_identificacion}/CONTRATO/{doc}'
        
#         # Generar el PDF
#         self.generate_pdf(ruta)
        
#         return HttpResponse(f'PDF generado en: {ruta}')

#     def get_context_data(self, **kwargs):
#         context = {}
#         contrato = self.object
#         iniciales = Empresa.objects.get(id=1)
#         try:
#             salario_numerico = float(contrato.salario)
#         except ValueError:
#             salario_numerico = 0.0

#         salario_formateado = "${:,.2f}".format(salario_numerico)
#         salario_texto = num2words(salario_numerico, lang='es').upper()
#         dia_en_letras = num2words(contrato.fecha_inicio.day, lang='es').capitalize()
#         mes_en_letras = contrato.fecha_inicio.strftime('%B')
#         mes_en_letras = {
#             'January': 'Enero',
#             'February': 'Febrero',
#             'March': 'Marzo',
#             'April': 'Abril',
#             'May': 'Mayo',
#             'June': 'Junio',
#             'July': 'Julio',
#             'August': 'Agosto',
#             'September': 'Septiembre',
#             'October': 'Octubre',
#             'November': 'Noviembre',
#             'December': 'Diciembre'
#         }.get(mes_en_letras, mes_en_letras)

#         anio_en_letras = num2words(contrato.fecha_inicio.year, lang='es').capitalize()

#         context['iniciales'] = iniciales
#         context['salario_formateado'] = salario_formateado
#         context['salario_texto'] = salario_texto
#         context['id_contrato'] = contrato.id
#         context['dia_en_letras'] = dia_en_letras
#         context['mes_en_letras'] = mes_en_letras
#         context['anio_en_letras'] = anio_en_letras
#         context['title'] = 'Contratos'
#         context['entity'] = 'Contratos'
#         context['list_url'] = reverse_lazy('RrHh:Listar_Contratos')
#         return context

#     def generate_pdf(self, ruta):
#         context = self.get_context_data()
#         html_string = render_to_string(self.template_name, context)
#         html = HTML(string=html_string)
#         html.write_pdf(target=ruta)
#         print(f'PDF generado en: {ruta}')
#         print('se creo correctamente el pdf')


#contrato_pdf con weasyprint